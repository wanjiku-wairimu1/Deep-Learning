https://justpaste.it/bx2z2
# 1st Hiden layer
model.add(Conv2D(32, (2,2)))
model.add(Activation('relu'))
# apply maxpooling to the image/padding
model.add(MaxPooling2D(pool_size=(2,2)))
 


# 2nd Hiden layer
model.add(Conv2D(64, (2,2)))
model.add(Activation('relu'))
# apply maxpooling to the image/padding
model.add(MaxPooling2D(pool_size=(2,2)))
 

# Flattening - reduces matrix into a column like
# Flattening makes it possible to applythe normal ANN
model.add(Flatten())
model.add(Dense(32))
model.add(Activation('relu'))
 

model.add(Dropout(0.5))
# output layer
model.add(Dense(1))
model.add(Activation('sigmoid'))

!pip install ann_visualizer
from ann_visualizer.visualize import ann_viz
ann_viz(model, view = True, title = "CNN Graph", filename = "cnn.gv")
# Image processing
# Convolational Neural Networks

https://justpaste.it/8sok4
# Channel First or Last
if backend.image_data_format() == 'channel_first':
input_shape = (3, img_width, img_height)
else:
input_shape = (img_width, img_height, 3)



# Create CNN - Convolutional neural nets
model = Sequential()
# input layer
model.add(Conv2D(32, (5,5), input_shape = input_shape))
model.add(Activation('relu'))
# apply maxpooling to the image/padding
model.add(MaxPooling2D(pool_size=(2,2)))
 


# 1st Hiden layer
model.add(Conv2D(64, (5,5)))
model.add(Activation('relu'))
# apply maxpooling to the image/padding
model.add(MaxPooling2D(pool_size=(2,2)))
 


# 2nd Hiden layer
model.add(Conv2D(128, (7,7)))
model.add(Activation('relu'))
# apply maxpooling to the image/padding
model.add(MaxPooling2D(pool_size=(2,2)))
 


# 3rd hidden
# Flattening - reduces matrix into a column like
# Flattening makes it possible to applythe normal ANN
model.add(Flatten())
model.add(Dense(32))
model.add(Activation('relu'))
 


model.add(Dense(64))
model.add(Activation('sigmoid'))
 


# output layer
model.add(Dense(1))
 


!pip install ann_visualizer
from ann_visualizer.visualize import ann_viz
ann_viz(model, view = True, title = "CNN Graph", filename = "cnn.gv")

https://justpaste.it/5ur7v
# Ways of avoiding overfitting
from keras.callbacks import EarlyStopping
es = EarlyStopping(monitor='loss',
mode = 'min',
patience = 10,
restore_best_weights=True)
 

# Model Check point - stores the the model after each epoch.
from keras.callbacks import ModelCheckpoint
stored_model = "imagebest.hdf5"
checkpoint = ModelCheckpoint(stored_model,
monitor="loss",
verbose=1,
save_best_only=True,
mode = 'min')

https://justpaste.it/1k9u0
train_datagen = ImageDataGenerator(
rescale = 1./255,
shear_range = 0.2,
zoom_range = 0.2,
horizontal_flip=True
)

test_datagen = ImageDataGenerator(
rescale = 1./255
)

# generate the real image data using above functions
train = train_datagen.flow_from_directory(train_data_dir,
target_size=(img_width, img_height),
batch_size = 64,
class_mode = 'binary')
 


test = test_datagen.flow_from_directory(test_data_dir,
target_size=(img_width, img_height),
batch_size = 64,
class_mode = 'binary')

https://justpaste.it/43zj3
# Lets get new images and see if model can predict
from keras.models import load_model
from keras_preprocessing.image import load_img
from keras_preprocessing.image import img_to_array

# Load model
model = load_model("imagebest.hdf5")
img_path = "plane2.jpg"
image = load_img(img_path, target_size = (224,224))

# convert this image to matrix/array
converted_image = img_to_array(image)
# Rescale
converted_image = converted_image/255.0
converted_image = converted_image.reshape(1, 224, 224, 3) # batch, width, height, channel
# 0 - Cars
# 1 - Planes
# see the images
import glob
from IPython.display import Image, display
for imageName in glob.glob(img_path):
display(Image(filename=imageName))

label = model.predict(converted_image)
print("Predicted ", label[0][0])
if label[0][0] < 0.5:
     print("Its a Car")
elif label[0][0] > 0.5:
     print("Its a Plane")
else:
     print("Its Unknown")

